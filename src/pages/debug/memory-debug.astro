---
// Memory Debug Page - Development only
import BaseLayout from '@/layouts/BaseLayout.astro';

if (import.meta.env.PROD) {
  return new Response('Not found', { status: 404 });
}
---

<BaseLayout title="Memory Debug - DeepHand Development">
  <div class="min-h-screen bg-gray-900 text-white p-8">
    <div class="max-w-4xl mx-auto">
      <h1 class="text-3xl font-bold mb-8">Memory Debug Dashboard</h1>
      
      <div id="memory-dashboard">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
          <div class="bg-gray-800 p-6 rounded-lg">
            <h2 class="text-xl font-semibold mb-4">Memory Usage</h2>
            <div id="memory-info" class="space-y-2">
              <div class="text-gray-400">Loading...</div>
            </div>
          </div>
          
          <div class="bg-gray-800 p-6 rounded-lg">
            <h2 class="text-xl font-semibold mb-4">Tracked Components</h2>
            <div id="component-info" class="space-y-2">
              <div class="text-gray-400">Loading...</div>
            </div>
          </div>
        </div>
        
        <div class="bg-gray-800 p-6 rounded-lg mb-6">
          <h2 class="text-xl font-semibold mb-4">Actions</h2>
          <div class="flex gap-4">
            <button id="force-gc" class="bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded">
              Force GC
            </button>
            <button id="refresh-data" class="bg-green-600 hover:bg-green-700 px-4 py-2 rounded">
              Refresh Data
            </button>
            <button id="start-profiling" class="bg-purple-600 hover:bg-purple-700 px-4 py-2 rounded">
              Start Profiling
            </button>
            <button id="stop-profiling" class="bg-red-600 hover:bg-red-700 px-4 py-2 rounded" style="display: none;">
              Stop Profiling
            </button>
          </div>
        </div>
        
        <div class="bg-gray-800 p-6 rounded-lg">
          <h2 class="text-xl font-semibold mb-4">Memory Profile</h2>
          <div id="memory-profile" class="font-mono text-sm">
            <div class="text-gray-400">Click "Start Profiling" to begin monitoring</div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script is:inline>
    // Memory debug utilities
    let profilingInterval = null;
    let memoryManager = null;

    // Import memory manager dynamically
    async function initMemoryManager() {
      try {
        const module = await import('@/lib/performance/memory-optimizer');
        memoryManager = module.memoryManager;
        return module;
      } catch (error) {
        console.error('Failed to load memory manager:', error);
        return null;
      }
    }

    function updateMemoryInfo() {
      if (!memoryManager) return;

      try {
        const debugInfo = memoryManager.getDebugInfo();
        
        // Update memory info
        const memoryInfoEl = document.getElementById('memory-info');
        if (memoryInfoEl && debugInfo.memoryInfo) {
          memoryInfoEl.innerHTML = `
            <div class="flex justify-between">
              <span class="text-gray-300">Used:</span>
              <span class="text-green-400">${debugInfo.memoryInfo.used}</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-300">Total:</span>
              <span class="text-blue-400">${debugInfo.memoryInfo.total}</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-300">Limit:</span>
              <span class="text-yellow-400">${debugInfo.memoryInfo.limit}</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-300">Usage:</span>
              <span class="text-${debugInfo.memoryInfo.usageRatio.startsWith('8') || debugInfo.memoryInfo.usageRatio.startsWith('9') ? 'red' : 'green'}-400">
                ${debugInfo.memoryInfo.usageRatio}
              </span>
            </div>
          `;
        }

        // Update component info
        const componentInfoEl = document.getElementById('component-info');
        if (componentInfoEl) {
          if (debugInfo.trackedComponents.length === 0) {
            componentInfoEl.innerHTML = '<div class="text-gray-400">No components tracked</div>';
          } else {
            componentInfoEl.innerHTML = debugInfo.trackedComponents.map(comp => `
              <div class="border-l-2 border-blue-500 pl-3 mb-2">
                <div class="font-medium">${comp.componentName}</div>
                <div class="text-sm text-gray-400">
                  Life: ${(comp.lifeTime / 1000).toFixed(1)}s | 
                  ID: ${comp.id.slice(-8)}
                </div>
              </div>
            `).join('');
          }
        }
      } catch (error) {
        console.error('Failed to update memory info:', error);
      }
    }

    function startProfiling() {
      if (profilingInterval) return;

      const profileEl = document.getElementById('memory-profile');
      const startBtn = document.getElementById('start-profiling');
      const stopBtn = document.getElementById('stop-profiling');

      if (profileEl) {
        profileEl.innerHTML = '<div class="text-green-400">Profiling started...</div>';
      }

      profilingInterval = setInterval(() => {
        if (!memoryManager) return;

        const debugInfo = memoryManager.getDebugInfo();
        if (debugInfo.memoryInfo && profileEl) {
          const timestamp = new Date().toLocaleTimeString();
          const entry = `[${timestamp}] ${debugInfo.memoryInfo.used} (${debugInfo.memoryInfo.usageRatio})`;
          
          const lines = profileEl.innerHTML.split('\n').filter(line => !line.includes('Profiling started'));
          lines.push(entry);
          if (lines.length > 10) lines.shift(); // Keep last 10 entries
          
          profileEl.innerHTML = lines.join('\n');
        }
      }, 1000);

      if (startBtn && stopBtn) {
        startBtn.style.display = 'none';
        stopBtn.style.display = 'inline-block';
      }
    }

    function stopProfiling() {
      if (profilingInterval) {
        clearInterval(profilingInterval);
        profilingInterval = null;
      }

      const profileEl = document.getElementById('memory-profile');
      const startBtn = document.getElementById('start-profiling');
      const stopBtn = document.getElementById('stop-profiling');

      if (profileEl) {
        profileEl.innerHTML += '\n<div class="text-red-400">Profiling stopped.</div>';
      }

      if (startBtn && stopBtn) {
        startBtn.style.display = 'inline-block';
        stopBtn.style.display = 'none';
      }
    }

    // Initialize when DOM is loaded
    document.addEventListener('DOMContentLoaded', async () => {
      await initMemoryManager();
      
      if (memoryManager) {
        updateMemoryInfo();
        
        // Set up event listeners
        document.getElementById('force-gc')?.addEventListener('click', () => {
          memoryManager.forceGarbageCollection();
          setTimeout(updateMemoryInfo, 100);
        });

        document.getElementById('refresh-data')?.addEventListener('click', updateMemoryInfo);
        document.getElementById('start-profiling')?.addEventListener('click', startProfiling);
        document.getElementById('stop-profiling')?.addEventListener('click', stopProfiling);

        // Auto-refresh every 5 seconds
        setInterval(updateMemoryInfo, 5000);
      } else {
        document.getElementById('memory-dashboard').innerHTML = `
          <div class="text-center text-red-400">
            <h2 class="text-xl mb-4">Memory Manager Not Available</h2>
            <p>This page requires the memory manager to be loaded.</p>
          </div>
        `;
      }
    });
  </script>
</BaseLayout>